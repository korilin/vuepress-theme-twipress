(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{382:function(t,s,a){t.exports=a.p+"assets/img/0.ac22c1de.jpg"},399:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"基本概念和术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念和术语"}},[t._v("#")]),t._v(" 基本概念和术语")]),t._v(" "),n("p",[n("strong",[t._v("数据 (Data)")]),t._v("：客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称")]),t._v(" "),n("p",[n("strong",[t._v("数据元素 (Data Element)")]),t._v("：数据的基本单位，在计算机中通常作为一个整体进行考虑和处理")]),t._v(" "),n("p",[n("strong",[t._v("数据项 (Data Item)")]),t._v("：组成数据元素的、有独立含义的、不可分割的最小单位")]),t._v(" "),n("p",[n("strong",[t._v("数据对象 (Data Object)")]),t._v("：是性质相同的数据元素的集合，是数据的一个子集")]),t._v(" "),n("p",[t._v("如何理解数据对象？什么是性质相同的数据元素的集合？")]),t._v(" "),n("p",[t._v("数据对象相当于数据的一部分内容，而这部分内容里面的元素都有相同的特点，举个例子：")]),t._v(" "),n("div",{staticClass:"language-markdown extra-class"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[t._v("数据                一个班级里面的学生\n数据对象            一个班里学生的信息表\n数据元素            学生信息表的每一条数据都是数据元素\n数据项              学生信息表里面的每一项信息\n")])])]),n("p",[t._v("这里面，学生的信息表是学生的一个部分内容，学生可以包含很多内容，除了信息表，还有成绩单，身份内容，这些都算是学生这个数据的一部分，也就是数据的子集，即数据对象。")]),t._v(" "),n("p",[t._v("而学生信息表里面会含有很多个信息项，例如姓名学号、专业、性别等等，这些信息项就是数据项，有着独立的含义。")]),t._v(" "),n("p",[t._v("信息表里面的每一个学生的数据，都算是一个数据元素，这些学生的数据构和数据项构造成了信息表，所以数据对象是数据元素的集合。")]),t._v(" "),n("h3",{attrs:{id:"数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),n("p",[n("strong",[t._v("数据结构 (Data Stucture)：是相互之间存在一种或多种特定关系的数据元素的集合。")])]),t._v(" "),n("p",[t._v("数据结构其实就是带有“结构”的数据元素的集合。不过说是数据元素的集合，我们平时的理解更多的是倾向于结构，学得主要也是结构，但这个名词本身指的还是集合！")]),t._v(" "),n("p",[t._v("数据结构包括逻辑结构和储存结构两个层次。")]),t._v(" "),n("h3",{attrs:{id:"逻辑结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑结构"}},[t._v("#")]),t._v(" 逻辑结构")]),t._v(" "),n("p",[n("strong",[t._v("逻辑结构是对于数据来讲的，从逻辑关系上描述数据，和数据的储存无关，独立于计算机。")])]),t._v(" "),n("p",[n("strong",[t._v("数据的逻辑结构分为：线性结构和非线性结构。")])]),t._v(" "),n("p",[n("strong",[t._v("四类基本逻辑结构：")])]),t._v(" "),n("ul",[n("li",[t._v("集合结构：数据元素除了属于同一集合外，没有其他关系")]),t._v(" "),n("li",[t._v("线性结构：数据元素之间存在一对一的关系")]),t._v(" "),n("li",[t._v("树结构：数据元素之间存在一对多的关系")]),t._v(" "),n("li",[t._v("图结构或网状结构：数据元素之间存在多对多的关系")])]),t._v(" "),n("p",[t._v("下面图示，会更容易理解")]),t._v(" "),n("p",[n("img",{attrs:{src:a(382),alt:"数据的逻辑结构层次图"}})]),t._v(" "),n("h3",{attrs:{id:"储存结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#储存结构"}},[t._v("#")]),t._v(" 储存结构")]),t._v(" "),n("p",[n("strong",[t._v("储存结构也称为物理结构，指的是数据对象在计算机中的存储方式。")])]),t._v(" "),n("p",[t._v("通常要求数据对象在存入计算机时既要存储数据元素的数据，也要存储数据元素之间的逻辑关系，数据元素在计算机内用一个结点来表示。")]),t._v(" "),n("p",[t._v("数据元素在计算机中的两种基本储存结构：")]),t._v(" "),n("p",[n("strong",[t._v("顺序存储结构")]),t._v("：借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系，要求所有的元素依次存放在一片连续的存储空间中")]),t._v(" "),n("p",[n("strong",[t._v("链式存储结构")]),t._v("：无需占用一整块存储空间，为了表示结点之间的关系，给每个结点附加指针字段，用于存放后继元素的存储地址。")]),t._v(" "),n("p",[t._v("补充："),n("em",[t._v("逻辑结构与数据元素本身的形式、内容、相对位置、个数无关。一些表面上很不相同的数据可以有相同的逻辑结构。通常要求同一逻辑结构中的所有数据元素具有相同的特性，这意味着不仅数据元素所包含的数据项的个数要相同，而且对应数据项的类型要一致")])]),t._v(" "),n("h3",{attrs:{id:"算法和算法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法和算法分析"}},[t._v("#")]),t._v(" 算法和算法分析")]),t._v(" "),n("p",[n("strong",[t._v("算法")]),t._v("：是为了解决某类问题而规定的一个有限长的操作序列")]),t._v(" "),n("p",[t._v("一个算法必须满足的五个重要特征："),n("strong",[t._v("有穷性、确定性、可行性、输入、输出")]),t._v("。")]),t._v(" "),n("p",[t._v("一个算法的优劣评价的方面："),n("strong",[t._v("正确性、可读性、健壮性、高效性")]),t._v("。")]),t._v(" "),n("p",[t._v("高效性包括时间和空间两个方面：")]),t._v(" "),n("ul",[n("li",[t._v("时间高效是指算法设计合理，执行效率高，可以用"),n("strong",[t._v("时间复杂度")]),t._v("来度量")]),t._v(" "),n("li",[t._v("空间高效是指算法占用存储容量合理，可以用"),n("strong",[t._v("空间复杂度")]),t._v("来度量")]),t._v(" "),n("li")]),t._v(" "),n("p",[n("strong",[t._v("时间复杂度和空间复杂度是衡量算法的两个主要指标。")])]),t._v(" "),n("p",[t._v("衡量算法效率的方法主要有两种：事后统计法和事前分析估算法。")]),t._v(" "),n("p",[t._v("通常采用事前分析估算法，通过计算算法的渐进复杂度来衡量算法的效率。")]),t._v(" "),n("h3",{attrs:{id:"渐进时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渐进时间复杂度"}},[t._v("#")]),t._v(" 渐进时间复杂度")]),t._v(" "),n("p",[n("strong",[t._v('一般情况下对于算法中基本语句的执行的是问题规模 n 的某个函数 f(n), 我们用"O"来表示数量级，算法的时间量度记作')])]),t._v(" "),n("p",[n("strong",[t._v("T(n) = O(f(n))")])]),t._v(" "),n("p",[t._v("它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称做算法的渐渐时间复杂度，简称时间复杂度 (Time Complexity).")]),t._v(" "),n("p",[n("strong",[t._v("问题规模")]),t._v("：问题规模是算法求解问题输入量的多少，是问题大小的本质表示，一般用整数 n 表示\n"),n("strong",[t._v("语句频度")]),t._v("：一条语句的重复执行次数")]),t._v(" "),n("p",[t._v("「 以下代码来自书中 」")]),t._v(" "),n("p",[n("strong",[t._v("一个算法的执行时间大致上等于所有语句执行时间的总和，而语句的执行时间则为该条语句的财富执行次数和执行一次所需时间的乘积。")])]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个 n 阶矩阵的乘积算法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设每条语句执行一次所需时间均为单位时间，n 为执行规模")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//频度为 n+1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                                                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//频度为 n*(n+1)")]),t._v("\n        c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//频度为 n^2")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//频度为 n^2 * (n+1)")]),t._v("\n        c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//频度为 n^3")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该算法中所有语句频度的和 f(n) = 2n^3 + 3n^2 + 2n + 1")]),t._v("\n")])])]),n("p",[t._v("为了客观反映一个算法的执行时间，可以通过算法中“基本语句”（重复执行次数和算法的执行时间成正比的语句，它对算法运行时间的贡献最大） 执行次数来度量算法的工作量。")]),t._v(" "),n("p",[t._v("通常，算法的执行时间随问题规模增长而增长，因此对算法的评价只需考虑其随问题规模增长的趋势。")]),t._v(" "),n("p",[t._v("上面那个例子，当执行规模 n 趋向无穷大时 f(n) / n^3  的极限等于 2，也就是当 n 充分大时，f(n) 和 n^3 的比是一个不等于 0 的常数。")]),t._v(" "),n("p",[t._v("即 f(n) 和 n^3 同阶（数量级 Order of Magnitude 相同），时间复杂度 T(n) = O(f(n)) = O(n^3)。")]),t._v(" "),n("p",[n("strong",[t._v("关于常量阶")])]),t._v(" "),n("p",[t._v("当语句频度为 1 时，算法执行时间是一个与问题规模 n 无关的常数，即 T(n) = O(1), 称为常量阶。")]),t._v(" "),n("p",[t._v("只要算法执行时间不随问题规模 n 增长而增长，算法中语句的频度就是某个常数，无论这个常数多大，算法的时间复杂度都是 O(1)。")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("关于线性阶")])]),t._v(" "),n("p",[t._v("循环体内两条基本语句的频度均为 f(n)=n, 算法的时间复杂度为 T(n) = O(n), 称为线性阶。")]),t._v(" "),n("p",[t._v("当算法的基本语句频度最大为 n^2 时，T(n) = O(n^2)，则为平方阶；")]),t._v(" "),n("p",[t._v("同样，当频度最大为 n^3 时，则为立方阶。")]),t._v(" "),n("p",[t._v("对数阶示例")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("设循环体里面的基本语句的频度为 f(n)")]),t._v(" "),n("p",[t._v("也就是执行了 f(n) 次 i*3")]),t._v(" "),n("p",[t._v("所以执行完 i 的值为 3^f(n)")]),t._v(" "),n("p",[t._v("由于 i<=n, 所以 3^f(n) <= n")]),t._v(" "),n("p",[t._v("可得到 f(n) <= log_3 n")]),t._v(" "),n("p",[t._v("所以这个程序的时间复杂度为 f(log3 n)")]),t._v(" "),n("h3",{attrs:{id:"最好、最坏、平均时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最好、最坏、平均时间复杂度"}},[t._v("#")]),t._v(" 最好、最坏、平均时间复杂度")]),t._v(" "),n("p",[t._v("对于某些问题，算法的基本语句的频度不仅仅和问题的规模有关，还依赖于其他因素，例如：未知的输入值、随机的初始化等等。")]),t._v(" "),n("p",[t._v("这些问题的算法，在计算时间复杂度的时候需要考虑各种情况。")]),t._v(" "),n("p",[t._v("称算法在最好情况下的时间复杂度为最好时间复杂度；最坏情况下算法的时间复杂度为最坏时间复杂度，分别指的是算法计算量可能达到的最小值和最大值。")]),t._v(" "),n("p",[t._v("算法的平均时间复杂度是指算法在所有情况下，按照输入实例以等概率出现时，算法计算量的加权平均值。")]),t._v(" "),n("p",[t._v("一般来说，人们更关心的是平均情况下和最坏情况下的时间复杂度，但是算法的平均时间复杂度难以确定。")]),t._v(" "),n("h3",{attrs:{id:"渐进空间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渐进空间复杂度"}},[t._v("#")]),t._v(" 渐进空间复杂度")]),t._v(" "),n("p",[n("strong",[t._v("和时间复杂度类似，渐进空间复杂度 (Space Complexity) 作为算法所需存储空间的量度，它也是问题规模 n 的函数。")])]),t._v(" "),n("p",[n("strong",[t._v("记作 S(n) = O(f(n))")])]),t._v(" "),n("p",[t._v("在分析时，输入数据所占的具体存储量取决于问题，和算法无关，所以秩序分析该算法在实现是所需要的辅助空间就行了。")]),t._v(" "),n("p",[t._v("若算法实现时所需的辅助存储空间相对于输入数据量而言是个常数，与问题本身无关，则称这个算法为原地工作，辅助空间为 O(1)。")]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于算法只需借助一个变量 t, 与问题规模 n 的大小无关，所以其空间复杂度为 O(1)")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-C extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 算法需要借助一个大小为 n 的辅助数组 b, 所以其空间复杂度为 O(n)")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("参考：人民邮电出版社《数据结构 C 语言版|第二版》严蔚敏")])])])}),[],!1,null,null,null);s.default=r.exports}}]);